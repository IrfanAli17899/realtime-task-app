generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id            String          @id @default(cuid()) @map("_id")
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    hashedPassword String?
    image         String?
    accounts      Account[]
    tasks         Task[]
    assignments   Assignment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

enum TaskStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
}

model Task {
    id          String  @id @default(cuid()) @map("_id")
    userId      String
    title       String
    description String?
    status      TaskStatus @default(PENDING)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    assignments Assignment[]
}

model Assignment {
    id          String  @id @default(cuid()) @map("_id")
    userId      String
    taskId      String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

    @@unique([taskId, userId])
}